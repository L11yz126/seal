# Ultralytics 🚀 AGPL-3.0 许可证 - https://ultralytics.com/license

# 包含YOLO训练、验证、预测和导出的全局配置YAML文件，包含设置和超参数
# 文档请参见 https://docs.ultralytics.com/usage/cfg/

task: detect # (str) YOLO任务，即detect(检测)、segment(分割)、classify(分类)、pose(姿态)、obb(定向边界框)
mode: train # (str) YOLO模式，即train(训练)、val(验证)、predict(预测)、export(导出)、track(跟踪)、benchmark(基准测试)

# 训练设置 -------------------------------------------------------------------------------------------------------
model: # (str, 可选) 模型文件路径，例如yolov8n.pt、yolov8n.yaml
data: # (str, 可选) 数据文件路径，例如coco8.yaml
epochs: 100 # (int) 训练的轮数
time: # (float, 可选) 训练的小时数，如果提供则覆盖epochs设置
patience: 100 # (int) 早停等待的轮数，即在没有明显改进的情况下继续训练的轮数
batch: 16 # (int) 每批次的图像数量(-1表示自动批次)
imgsz: 640 # (int | list) 输入图像尺寸，训练和验证模式下为int，预测和导出模式下为list[h,w]
save: True # (bool) 保存训练检查点和预测结果
save_period: -1 # (int) 每x个轮次保存一次检查点(小于1时禁用)
cache: False # (bool) True/ram、disk或False。使用缓存加载数据
device: # (int | str | list, 可选) 运行设备，例如cuda device=0或device=0,1,2,3或device=cpu
workers: 8 # (int) 数据加载的工作线程数(如果是DDP则为每个RANK)
project: # (str, 可选) 项目名称
name: # (str, 可选) 实验名称，结果保存到'project/name'目录
exist_ok: False # (bool) 是否覆盖现有实验
pretrained: True # (bool | str) 是否使用预训练模型(bool)或加载权重的模型(str)
optimizer: auto # (str) 使用的优化器，选项=[SGD, Adam, Adamax, AdamW, NAdam, RAdam, RMSProp, auto]
verbose: True # (bool) 是否打印详细输出
seed: 0 # (int) 随机种子，用于可重现性
deterministic: True # (bool) 是否启用确定性模式
single_cls: False # (bool) 将多类数据作为单类训练
rect: False # (bool) 如果mode='train'则为矩形训练，如果mode='val'则为矩形验证
cos_lr: False # (bool) 使用余弦学习率调度器
close_mosaic: 10 # (int) 在最后几个轮次禁用马赛克增强(0表示禁用)
resume: False # (bool) 从上一个检查点恢复训练
amp: True # (bool) 自动混合精度(AMP)训练，选项=[True, False]，True会运行AMP检查
fraction: 1.0 # (float) 要训练的数据集比例(默认为1.0，训练集中的所有图像)
profile: False # (bool) 在训练期间分析ONNX和TensorRT速度，用于记录器
freeze: None # (int | list, 可选) 在训练期间冻结前n层，或冻结层索引列表
multi_scale: False # (bool) 是否在训练期间使用多尺度
# 分割
overlap_mask: True # (bool) 在训练期间将对象掩码合并为单个图像掩码(仅分割训练)
mask_ratio: 4 # (int) 掩码下采样比率(仅分割训练)
# 分类
dropout: 0.0 # (float) 使用dropout正则化(仅分类训练)

# 验证/测试设置 ----------------------------------------------------------------------------------------------------
val: True # (bool) 在训练期间验证/测试
split: val # (str) 用于验证的数据集分割，即'val'、'test'或'train'
save_json: False # (bool) 将结果保存为JSON文件
save_hybrid: False # (bool) 保存标签的混合版本(标签+额外预测)
conf: # (float, 可选) 检测的对象置信度阈值(默认预测为0.25，验证为0.001)
iou: 0.7 # (float) 非极大值抑制(NMS)的交并比(IoU)阈值
max_det: 300 # (int) 每张图像的最大检测数
half: False # (bool) 使用半精度(FP16)
dnn: False # (bool) 使用OpenCV DNN进行ONNX推理
plots: True # (bool) 在训练/验证期间保存图表和图像

# 预测设置 -----------------------------------------------------------------------------------------------------
source: # (str, 可选) 图像或视频的源目录
vid_stride: 1 # (int) 视频帧率步长
stream_buffer: False # (bool) 缓冲所有流帧(True)或返回最近的帧(False)
visualize: False # (bool) 可视化模型特征
augment: False # (bool) 对预测源应用图像增强
agnostic_nms: False # (bool) 类别无关的NMS
classes: # (int | list[int], 可选) 按类别过滤结果，例如classes=0或classes=[0,2,3]
retina_masks: False # (bool) 使用高分辨率分割掩码
embed: # (list[int], 可选) 从给定层返回特征向量/嵌入

# 可视化设置 ---------------------------------------------------------------------------------------------------
show: False # (bool) 如果环境允许，显示预测的图像和视频
save_frames: False # (bool) 保存预测的单个视频帧
save_txt: False # (bool) 将结果保存为.txt文件
save_conf: False # (bool) 保存带有置信度分数的结果
save_crop: False # (bool) 保存带有结果的裁剪图像
show_labels: True # (bool) 显示预测标签，例如'person'
show_conf: True # (bool) 显示预测置信度，例如'0.99'
show_boxes: True # (bool) 显示预测框
line_width: # (int, 可选) 边界框的线宽。如果为None则根据图像大小缩放。

# 导出设置 ------------------------------------------------------------------------------------------------------
format: torchscript # (str) 导出格式，选项见https://docs.ultralytics.com/modes/export/#export-formats
keras: False # (bool) 使用Keras
optimize: False # (bool) TorchScript：为移动设备优化
int8: False # (bool) CoreML/TF INT8量化
dynamic: False # (bool) ONNX/TF/TensorRT：动态轴
simplify: True # (bool) ONNX：使用`onnxslim`简化模型
opset: # (int, 可选) ONNX：opset版本
workspace: None # (float, 可选) TensorRT：工作空间大小(GiB)，`None`将让TensorRT自动分配内存
nms: False # (bool) CoreML：添加NMS

# 超参数 ------------------------------------------------------------------------------------------------------
lr0: 0.01 # (float) 初始学习率(例如SGD=1E-2，Adam=1E-3)
lrf: 0.01 # (float) 最终学习率(lr0 * lrf)
momentum: 0.937 # (float) SGD动量/Adam beta1
weight_decay: 0.0005 # (float) 优化器权重衰减5e-4
warmup_epochs: 3.0 # (float) 预热轮数(可以是小数)
warmup_momentum: 0.8 # (float) 预热初始动量
warmup_bias_lr: 0.1 # (float) 预热初始偏置学习率
box: 7.5 # (float) 框损失增益
cls: 0.5 # (float) 分类损失增益(随像素缩放)
dfl: 1.5 # (float) dfl损失增益
pose: 12.0 # (float) 姿态损失增益
kobj: 1.0 # (float) 关键点obj损失增益
nbs: 64 # (int) 标称批次大小
hsv_h: 0.015 # (float) 图像HSV-色调增强(比例)
hsv_s: 0.7 # (float) 图像HSV-饱和度增强(比例)
hsv_v: 0.4 # (float) 图像HSV-亮度增强(比例)
degrees: 0.0 # (float) 图像旋转(+/-度)
translate: 0.1 # (float) 图像平移(+/-比例)
scale: 0.5 # (float) 图像缩放(+/-增益)
shear: 0.0 # (float) 图像剪切(+/-度)
perspective: 0.0 # (float) 图像透视(+/-比例)，范围0-0.001
flipud: 0.0 # (float) 图像上下翻转(概率)
fliplr: 0.5 # (float) 图像左右翻转(概率)
bgr: 0.0 # (float) 图像通道BGR(概率)
mosaic: 1.0 # (float) 图像马赛克(概率)
mixup: 0.0 # (float) 图像混合(概率)
copy_paste: 0.0 # (float) 分割复制粘贴(概率)
copy_paste_mode: "flip" # (str) 执行复制粘贴增强的方法(flip, mixup)
auto_augment: randaugment # (str) 分类的自动增强策略(randaugment, autoaugment, augmix)
erasing: 0.4 # (float) 分类训练期间随机擦除的概率(0-0.9)，0表示无擦除，必须小于1.0
crop_fraction: 1.0 # (float) 分类的图像裁剪比例(0.1-1)，1.0表示无裁剪，必须大于0

# 自定义config.yaml ---------------------------------------------------------------------------------------------------
cfg: # (str, 可选) 用于覆盖defaults.yaml

# 跟踪器设置 ------------------------------------------------------------------------------------------------------
tracker: botsort.yaml # (str) 跟踪器类型，选项=[botsort.yaml, bytetrack.yaml]
